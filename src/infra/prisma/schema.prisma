// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(uuid())
  name                 String
  email                String                 @unique
  password             String?
  features             String[]               @default([])
  avatar               String                 @default("https://i.ibb.co/k0tSSCy/user.png")
  activateAccountToken ActivateAccountToken[]
  recoverPasswordToken RecoverPasswordToken[]
  session              Session[]

  createdAt           DateTime     @default(now()) @db.Timestamptz
  updatedAt           DateTime     @updatedAt @db.Timestamptz
  ApprovedIndividuals Individual[]
  ApprovedCompanies   Company[]

  @@map("users")
}

model ActivateAccountToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  used      Boolean  @default(false)
  expiresAt DateTime @db.Timestamptz

  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  @@map("activate_account_tokens")
}

model RecoverPasswordToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  used      Boolean  @default(false)
  expiresAt DateTime @db.Timestamptz

  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  @@map("recover_password_tokens")
}

model Session {
  id           String   @id @default(uuid())
  token        String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  expiresAt    DateTime @db.Timestamptz
  browser      String?
  cpu          String?
  deviceModel  String?
  deviceType   String?
  deviceVendor String?
  osName       String?
  osVersion    String?

  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  @@map("sessions")
}

model Individual {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  motherName  String?
  cpf         String   @unique
  birthday    DateTime @db.Date
  phoneNumber String?
  address     Address  @relation(fields: [addressId], references: [id])
  addressId   String   @unique

  approvedBy       User?     @relation(fields: [approvedByUserId], references: [id])
  approvedByUserId String?
  approvedAt       DateTime? @db.Timestamptz

  companiesAsPartner  Company[] @relation("CompanyPartners")
  companyAsEmployee   Company?  @relation("CompanyEmployees", fields: [companyAsEmployeeId], references: [id])
  companyAsEmployeeId String?

  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  @@map("individuals")
}

model Address {
  id         String  @id @default(uuid())
  cep        String
  street     String
  number     String
  complement String?
  city       String
  state      String

  createdAt  DateTime    @default(now()) @db.Timestamptz
  updatedAt  DateTime    @updatedAt @db.Timestamptz
  Individual Individual?
  Company    Company?

  @@map("addresses")
}

model Company {
  id String @id @default(uuid())

  name        String
  formalized  Boolean
  cnpj        String? @unique
  fantasyName String?
  email       String? @unique
  phoneNumber String?

  address   Address @relation(fields: [addressId], references: [id])
  addressId String  @unique

  partners  Individual[] @relation("CompanyPartners")
  employees Individual[] @relation("CompanyEmployees")

  approvedBy       User?     @relation(fields: [approvedByUserId], references: [id])
  approvedByUserId String?
  approvedAt       DateTime? @db.Timestamptz

  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  @@map("companies")
}
